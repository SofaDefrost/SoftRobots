![](../../images/pluginimage.png){width=100%}

<script language="javascript">
function toggle(target) {
    d = document.getElementById(target);
    if(d.className === "show")
        d.className = "hide"
    else 
        d.className = "show"
    return false;
}
</script>

## First steps with Sofa & SoftRobots
Welcome in Sofa and the SoftRobots plugins. This tutorial is intended for people
who have never used Sofa, and aims at providing them quickly with the basis of scene modelling with Sofa.

This tutorial describes how to set-up a simulation environment, a scene, using ..autolink::Sofa and how to use the
..autolink::STLIB plugin to add simulated elements.

Tutorials prequisites:

- installed ..autolink::Sofa with the ..autolink::STLIB.

- you have basic knowledge of the ..autolink::General::Python programming language. If not, you can go to ..autolink::General::PythonTutorials.

### Step 1: Loading a scene on Sofa

Sofa is loading the description of the simulation from *pyscn* files. Sofa is started with the command `runSofa` in the terminal.  
To run a file `MyScene.pyscn`, use the command `cd` to go to the file directory, and then type `runSofa MyScene.pyscn`.  
In order to interact with the robot - that is, to be able to send data to it, one way is to start Sofa with administrator rights, using the command `sudo`:  
```console 
sudo PATH\_TO\_BUILD\_DIRECTORY/bin/runSofa PATH\_TO\_SCENE/MyScene.pyscn
```


### Step 2: Setting up a simple scene

The content of the `pyscn`  simulation files is in fact standard python code with
at least one function named `createScene` taking a single parameter, the root of the scene hierarchy. This function is the entry point used by Sofa
to fill the simulation's content and this is the place where you will type your scene's description. A scene is an ordered tree of nodes (example of node: gripper), with parent/child relationship (example of gripper's child: finger). Each node has one or more components. Every node and component has a name and a few features. The main node at the top of the tree is called "rootNode". Additional components can be added to the scene, that aren't nodes (they can't have children), related to the behaviour of the node (example: 

Making a very simple scene:
<div>
<pre>
<a href="details/step0.pyscn"> <img src="../../images/icons/play.png" width="16px"/>Try the scene in Sofa.</a>
<a href="myproject/firststeps.pyscn"> <img src="../../images/icons/play.png" width="16px"/>Write it yourself.</a>
<a href="javascript:void" onclick="toggle('step1code');"> <img src="../../images/icons/play.png" width="16px"/>Show/Hide the code.</a>
</pre>
<div id='step1code' class='hide'>
```python
from stlib.scene import ..autolink::STLIB::MainHeader, ..autolink::STLIB::ContactHeader
from stlib.visuals import ShowGrid
from stlib.physics.rigid import ..autolink::STLIB::Floor
from stlib.physics.rigid import ..autolink::STLIB::Cube

def createScene(rootNode):
    """This is my first scene"""
    ..autolink::STLIB::MainHeader(rootNode, gravity=[0.0,-981.0,0.0])
    ..autolink::STLIB::ContactHeader(rootNode, alarmDistance=15, contactDistance=10)

    ..autolink::STLIB::Floor(rootNode,
          translation=[0.0,-160.0,0.0],
          isAStaticObject=True)

    ..autolink::STLIB::Cube(rootNode,
          translation=[0.0,0.0,0.0],
          uniformScale=20.0)


    return rootNode
```
</div>
</div>

#####Remarks
- The main node (rootNode) in this scene has two child nodes: Floor and Cube (the two physical objects present in the scene).
- #### and MainHeader (adding gravity as the main force exercised on the objects) and ContactHeader (stating how a contact beween the objects is handled).
<!-- c'est juste ? -->
- Each object has several parameters and ### <!-- à compléter -->

####<i>Exploring the scene</i>

- All scene codes can be modified: right click anywhere in the *Graph* panel of the Sofa GUI, and click on *Open file in editor* in the dropdown menu. The modififations need to be saved ('Save' button) before reloading the scene. 

- In order to reload the scene (after each modification of the code), press Ctrl+R or select File \> Reload in the menu bar.

- To automatically reload the file when there are changes, add the option `-i` when loading the scene in the terminal: `runSofa firststeps.pyscn -i`.

- In order to vizualize the properties of the objects directly from the GUI, double-click on the wanted item in the *Graph* panel to open the corresponding settings window. The properties can also be modified directly from this window (click on the 'Update' button to reload the scene with the new parameters afterwards).

You can try the following manipulations, in order to get familiar with Sofa environment:  
(Click on the text to Show/Hide the solution)

<div>
<pre>
<a href="javascript:void" onclick="toggle('step1exo');"> <img src="../../images/icons/play.png" width="16px"/>Change the position of the cube from Sofa GUI</a>
</pre>
<div id='step1exo' class='hide'>
In the 'Graph' panel on the left, unroll the 'Cube' Menu and double-click on 'MechanicalObject mstate'.  
In the window that appears, go to the 'Transformation'tab: the line 'translation' allows you to move the object in the scene.
</div>
<a href="javascript:void" onclick="toggle('step1exo2');"> <img src="../../images/icons/play.png" width="16px"/>Change the color of the cube, directly in the code</a>
</pre>
<div id='step1exo2' class='hide'>
After having opened the code file, add the *color* argument to the *cube* function.  
The function become **Cube(rootNode, translation=[0.0,0.0,0.0], uniformScale=20.0, color=[0.0,0.0,1.0,1.0])**.
The color vector is defined by percentages of [Red,Green,Blue].  
Don't forget to save and reload the scene.
</div>
</div>
<!-- à tester -->


### Step 2: Make a template to reuse the object you made

Though creating an object like the Cube of Step1 is rather quick, it can be interesting to build a template for when several instances of an object are needed.  
Imagine that the expected scene is the following one:  
![](step2screen.png){width=50%}
<!-- à vérifier -->
All cubes are similar in size, only their color and position differ from one another. In order to build that rapidly, the same `Cube()` tamplate can be used several times with a variable parameter `c`, allowing to modify both the translation and the color of each cube by only changing `c`. A loop taking `c` as a parameter allows to generate the multiple instances of the *prefab*.

<div>
<pre>
<a href="details/step2.pyscn"> <img src="../../images/icons/play.png" width="16px"/>Try the scene in Sofa.</a>
<a href="myproject/firststeps.pyscn"> <img src="../../images/icons/play.png" width="16px"/>Write it yourself.</a>
<a href="javascript:void" onclick="toggle('step2code');"> <img src="../../images/icons/play.png" width="16px"/>Show/Hide the code.</a>
</pre>
<div id='step2code' class='hide'>
```python
from stlib.scene import ..autolink::STLIB::MainHeader, ..autolink::STLIB::ContactHeader
from stlib.visuals import ShowGrid
from stlib.physics.rigid import ..autolink::STLIB::Floor
from stlib.physics.rigid import ..autolink::STLIB::Cube

def createScene(rootNode):
    """This is my first scene"""
<!-- IL FAUT ENLEVER LES MECHANICAL OBJECTS ICI & PQUOI EST-CE QUE LES CUBES TOMBENT MEME SI ON ENLEVE GRAVITY-->
    ..autolink::STLIB::MainHeader(rootNode, gravity=[0.0,-981.0,0.0])
    ..autolink::STLIB::ContactHeader(rootNode, alarmDistance=2, contactDistance=1)

    ShowGrid(rootNode)

    ..autolink::STLIB::Floor(rootNode,
          translation=[0.0,-160.0,0.0],
          uniformScale=5.0,
          isAStaticObject=True)

    for c in range(10):
        ..autolink::STLIB::Cube(rootNode,
             translation=[-200+c*50,0.0,0.0],
             color=[c/10.0,c*0.7/10.0,0.9,1.0],
             uniformScale=20.0)


    return rootNode
```
</div>

By clicking on the [Animate] button here, nothing changes on the scene. In order to make the cube fall on the Floor, as it would be expected for real cubes, Mechanical objects are needed.

### Step 3: Add mechanical objects.

As in the example scene make a cube falling on the floor.

<div>
<pre>
<a href="details/step3.pyscn"> <img src="../../images/icons/play.png" width="16px"/>Try the scene in Sofa.</a>
<a href="myproject/firststeps.pyscn"> <img src="../../images/icons/play.png" width="16px"/>Write it yourself.</a>
<a href="javascript:void" onclick="toggle('step3code');"> <img src="../../images/icons/play.png" width="16px"/>Show/Hide the code.</a>
</pre>
<div id='step3code' class='hide'>
```python
from stlib.scene import ..autolink::STLIB::MainHeader, ..autolink::STLIB::ContactHeader
from stlib.visuals import ShowGrid
from stlib.physics.rigid import ..autolink::STLIB::Floor
from stlib.physics.rigid import ..autolink::STLIB::Cube
from stlib.physics.deformable import ..autolink::STLIB::ElasticMaterialObject

def createScene(rootNode):
    """This is my first scene"""
    ..autolink::STLIB::MainHeader(rootNode, gravity=[0.0,-981.0,0.0])
    ..autolink::STLIB::ContactHeader(rootNode, alarmDistance=2, contactDistance=1)

    ShowGrid(rootNode)

    ..autolink::STLIB::Floor(rootNode,
          translation=[0.0,-160.0,0.0],
          uniformScale=5.0,
          isAStaticObject=True)

    for c in range(10):
        ..autolink::STLIB::Cube(rootNode,
             translation=[-200+c*50,0.0,0.0],
             color=[c/10.0,c*0.7/10.0,0.9,1.0],
             uniformScale=20.0)


    return rootNode
```
</div>

<!-- REPLACE STEP1 BY STEP0, STEP3 A TESTER PUISQUE BEUGUE SUR LA SIMU -->

