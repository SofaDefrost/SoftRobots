name: Nightly-build

on:
  workflow_dispatch:

jobs:
  build-and-test:
    name: Building master-nightly on ${{ matrix.os }} using the SOFA_master_nightly
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
        sofa_branch: [master]

    steps:
      - name: Setup SOFA and environment
        id: sofa
        uses: sofa-framework/sofa-setup-action@v4
        with:
          sofa_root: ${{ github.workspace }}/sofa
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_scope: 'standard'

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKSPACE_SRC_PATH }}

      - name: Build and install
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $WORKSPACE_BUILD_PATH \
              && cmake \
                  -GNinja \
                  -DCMAKE_PREFIX_PATH="$SOFA_ROOT/lib/cmake" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
                  -DSOFTROBOTS_BUILD_TESTS=True \
                  ../src \
              && ninja install"
          else
            cd "$WORKSPACE_BUILD_PATH"
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
              -DSOFTROBOTS_BUILD_TESTS=True \
              -DSOFTROBOTS_IGNORE_ERRORS=True \
              ../src
            ninja install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi

      - name: Create artifact
        uses: actions/upload-artifact@v4.4.0
        with:
          name: SoftRobots_master_nightly_${{ runner.os }}
          path: ${{ env.WORKSPACE_INSTALL_PATH }}

      - name: Install artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: SoftRobots_master_nightly_${{ runner.os }}
          path: ${{ env.WORKSPACE_ARTIFACT_PATH }}

      - name: Set env vars for tests
        shell: bash
        run: |
          # Set env vars for tests
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$(cd $WORKSPACE_ARTIFACT_PATH/lib && pwd -W)" >> $GITHUB_PATH
            echo "$(cd $WORKSPACE_ARTIFACT_PATH/bin && pwd -W)" >> $GITHUB_PATH
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "DYLD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$DYLD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi
          echo "LD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          # Add execution right on the tests
          chmod +x $WORKSPACE_BUILD_PATH/bin/*_test${{ steps.sofa.outputs.exe }}

      - name: Check environment for tests
        shell: bash
        run: |
          echo '------ ls -la "$WORKSPACE_SRC_PATH" ------'
          ls -la "$WORKSPACE_SRC_PATH"
          echo '------ ls -la "$WORKSPACE_BUILD_PATH" ------'
          ls -la "$WORKSPACE_BUILD_PATH"
          echo '------ ls -la "$WORKSPACE_INSTALL_PATH" ------'
          ls -la "$WORKSPACE_INSTALL_PATH"
          echo '------ ls -la "$WORKSPACE_ARTIFACT_PATH" ------'
          ls -la "$WORKSPACE_ARTIFACT_PATH"
          echo '----------------------'
          echo "SOFA_ROOT = $SOFA_ROOT"=
          echo '----------------------'
          python -c "import sys; print('sys.version = ' + str(sys.version)); print('sys.path = ' + str(sys.path))"

      - name: Run tests SoftRobots_test
        if: always()
        shell: bash
        run: |
          cd $WORKSPACE_BUILD_PATH
          ./bin/SoftRobots_test${{ steps.sofa.outputs.exe }}

  deploy:
    name: Deploy artifacts
    needs: [build-and-test]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d (at %T)')"
    
      - name: Get artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          path: artifacts

      - name: Zip artifacts
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/artifacts
          for artifact in *; do
            echo "Now zipping "$artifact
            mv $artifact SoftRobots
            zip $artifact.zip -r SoftRobots
            md5sum $artifact.zip > $artifact.zip.md5
            rm -rf SoftRobots
          done

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}-nightly
          tag_name: ${{ github.ref_name }}
          body: |
                This Nighly build has been generated the ${{ steps.date.outputs.date }}
                This binary version should be compatible with nightly build of our plugins as well as with the nighly build of 
                Sofa that are available at:
                  - Linux: https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=master,CI_SCOPE=standard/lastSuccessfulBuild/artifact/Linux/*zip*/Linux.zip
                  - Windows: https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=master,CI_SCOPE=standard/lastSuccessfulBuild/artifact/Windows/*zip*/Windows.zip
                  - MacOS: https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=master,CI_SCOPE=standard/lastSuccessfulBuild/artifact/MacOS/*zip*/MacOS.zip
                                
                For ease of installation you can also install the nighly builds of Sofa and ours plugin using the Sofa Package Manager: https://github.com/SofaDefrost/SPM
                spm install SoftRobots-bin-nightly
                or 
                spm install SoftDefrost-bin-nightly (to get all our software stack)
                               
          fail_on_unmatched_files: true
          files: |
            artifacts/SoftRobots_master_nightly_Linux.zip
            artifacts/SoftRobots_master_nightly_Linux.zip.md5
            artifacts/SoftRobots_master_nightly_Windows.zip
            artifacts/SoftRobots_master_nightly_Windows.zip.md5
            artifacts/SoftRobots_master_nightly_macOS.zip
            artifacts/SoftRobots_master_nightly_macOS.zip.md5
            
