import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../data/mesh/'

def createScene(rootNode):

				rootNode.createObject('RequiredPlugin', pluginName='SoftRobots')
				rootNode.createObject('VisualStyle', displayFlags='showVisualModels showBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

				rootNode.createObject('FreeMotionAnimationLoop')
				rootNode.createObject('GenericConstraintSolver', maxIterations="1000", tolerance="0.001")

				rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
				rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")


				##########################################
				# FEM Model                              #
				##########################################
				finger = rootNode.createChild('finger')
				# Add an ODE (Ordinary Differential Equation) solver for time integration which will allow the finger position
				# to be updated at each timestep.
				finger.createObject('EulerImplicit', name='odesolver', firstOrder='1')
				finger.createObject('SparseLDLSolver', name='preconditioner')

				finger.createObject('MeshVTKLoader', name='loader', filename=path+'finger.vtk')
				finger.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')

				finger.createObject('MechanicalObject', name='tetras', template='Vec3d')

				#To be properly simulated and to interact with gravity or inertia forces, an object also needs a mass. You can add a
				#given mass with a uniform distribution for an object by adding a UniformMass component to the finger node
				finger.createObject('UniformMass', totalMass=' 0.5')

				# The next component to add is a FEM forcefield which defines how the object reacts to a loading (i.e. which deformations are created from forces applied onto it).
				# Here, because the finger is made of silicone, its mechanical behavior is assumed elastic. This behavior is available via the TetrahedronFEMForceField component.
				finger.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='18000')

				# Set the ROI of points of the model to fix.
				# You can either use "BoxROI"...
				finger.createObject('BoxROI', name='ROI1', box='-15 0 0 5 10 15', drawBoxes='true')
				# "SphereROI"...
				#finger.createObject('SphereROI', name='ROI', centers='0 0 0', radii='5')
				finger.createObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness='1e12')
				# Or simply set by hand the indices of the points you want to fix.
				#finger.createObject('RestShapeSpringsForceField', points='0 1 2 11 55', stiffness='1e12')

				finger.createObject('LinearSolverConstraintCorrection')


				##########################################
				# Visualization                          #
				##########################################
				fingerVisu = finger.createChild('visu')
				fingerVisu.createObject('OglModel', filename=path+"finger.stl", template='ExtVec3f', color="0.0 0.7 0.7")
				fingerVisu.createObject('BarycentricMapping')



				return rootNode
