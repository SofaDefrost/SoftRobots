import Sofa.Core

def createScene(rootNode):

	rootNode.addObject("OglGrid", nbSubdiv=10, size=1000)

	rootNode.findData('gravity').value=[0.0,-981.0,0.0];
	rootNode.findData('dt').value=0.01

	#Required plugins
	confignode = rootNode.addChild("Config")
	confignode.addObject('RequiredPlugin', name="SofaMiscCollision", printLog=False)
	confignode.addObject('RequiredPlugin', name="SofaImplicitOdeSolver", printLog=False)
	confignode.addObject('RequiredPlugin', name="SofaLoader", printLog=False)
	confignode.addObject('RequiredPlugin', name="SofaMeshCollision", printLog=False)
	confignode.addObject('RequiredPlugin', name="SofaOpenglVisual", printLog=False)
	confignode.addObject('RequiredPlugin', name="SofaRigid", printLog=False)
	confignode.addObject('OglSceneFrame', style="Arrows", alignment="TopRight")


	#Collision function
	rootNode.addObject('DefaultPipeline')
	rootNode.addObject('FreeMotionAnimationLoop')
	rootNode.addObject('GenericConstraintSolver', tolerance="1e-6", maxIterations="1000")
	rootNode.addObject('BruteForceDetection')
	rootNode.addObject('RuleBasedContactManager', responseParams="mu="+str(0.0), name='Response', response='FrictionContact')
	rootNode.addObject('LocalMinDistance', alarmDistance=10, contactDistance=5, angleCone=0.01)

	### Mechanical model
	totalMass = 1.0
	volume = 1.0
	inertiaMatrix=[1., 0., 0., 0., 1., 0., 0., 0., 1.]

	#Creating the cubes
	for c in range(7):
		cube = rootNode.addChild("cube"+str(-210+c*70))
		cube.addObject('MechanicalObject', name="mstate", template="Rigid3", translation2=[-210+c*70, 0., 0.], rotation2=[0., 0., 0.], showObjectScale=50)

		cube.addObject('UniformMass', name="mass", vertexMass=[totalMass, volume, inertiaMatrix[:]])
		cube.addObject('UncoupledConstraintCorrection')

		cube.addObject('EulerImplicitSolver', name='odesolver')
		cube.addObject('CGLinearSolver', name='Solver')

		#### visualization
		cubeVisu = cube.addChild("VisualModel")
		cubeVisu.loader = cubeVisu.addObject('MeshObjLoader', name="loader", filename="mesh/cube.obj")
		cubeVisu.addObject('OglModel', name="model", src="@loader", scale3d=[20]*3, color=[0., 1., 0.], updateNormals=False)
		cubeVisu.addObject('RigidMapping')


		collision = cube.addChild('collision')
		collision.addObject('MeshObjLoader', name="loader", filename="mesh/cube.obj", triangulate="true", scale=45.0)

		collision.addObject('MeshTopology', src="@loader")
		collision.addObject('MechanicalObject')

		collision.addObject('TriangleCollisionModel')
		collision.addObject('LineCollisionModel')
		collision.addObject('PointCollisionModel')

		collision.addObject('RigidMapping')


	#Creating the floor
	floor = rootNode.addChild("floor")
	floor.addObject('MechanicalObject', name="mstate", template="Rigid3", translation2=[0.0,-300.0,0.0], rotation2=[0., 0., 0.], showObjectScale=5.0)
	floor.addObject('UniformMass', name="mass", vertexMass=[totalMass, volume, inertiaMatrix[:]])

	floorCollis = floor.addChild('collision')
	floorCollis.addObject('MeshObjLoader', name="loader", filename="mesh/floor.obj", triangulate="true", scale=5.0)
	floorCollis.addObject('MeshTopology', src="@loader")
	floorCollis.addObject('MechanicalObject')
	floorCollis.addObject('TriangleCollisionModel', moving=False, simulated=False)
	floorCollis.addObject('LineCollisionModel', moving=False, simulated=False)
	floorCollis.addObject('PointCollisionModel', moving=False, simulated=False)


	#### visualization
	floorVisu = floor.addChild("VisualModel")
	floorVisu.loader = floorVisu.addObject('MeshObjLoader', name="loader", filename="mesh/floor.obj")
	floorVisu.addObject('OglModel', name="model", src="@loader", scale3d=[5.0]*3, color=[1., 1., 0.], updateNormals=False)
	floorVisu.addObject('RigidMapping')

	#floor obstacle
	floorobs = rootNode.addChild("floor obstacle")
	floorobs.addObject('MechanicalObject', name="mstate", template="Rigid3", translation2=[0.0,-200.0,0.0], rotation2=[0., 0., 0.], showObjectScale=5.0)
	floorobs.addObject('UniformMass', name="mass", vertexMass=[totalMass, volume, inertiaMatrix[:]])

	floorCollisObs = floorobs.addChild('collision')
	floorCollisObs.addObject('MeshObjLoader', name="loader", filename="mesh/floor.obj", triangulate="true", scale=5.0)
	floorCollisObs.addObject('MeshTopology', src="@loader")
	floorCollisObs.addObject('MechanicalObject')
	floorCollisObs.addObject('TriangleCollisionModel', moving=False, simulated=False)
	floorCollisObs.addObject('LineCollisionModel', moving=False, simulated=False)
	floorCollisObs.addObject('PointCollisionModel', moving=False, simulated=False)


	###Visualization
	floorVisu = floorobs.addChild("VisualModel")
	floorVisu.loader = floorVisu.addObject('MeshObjLoader', name="loader", filename="mesh/floor.obj")
	floorVisu.addObject('OglModel', name="model", src="@loader", scale3d=[2.0]*3, color=[1., 1., 0.], updateNormals=False)
	floorVisu.addObject('RigidMapping')

	return rootNode