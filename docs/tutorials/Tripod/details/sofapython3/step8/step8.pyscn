# -*- coding: utf-8 -*-
'''
Step 9: Adding the rigidification to the tutorial.

'''
from stlib3.scene import Scene
from splib3.animation import AnimationManager
from tripod import Tripod
from tripodcontroller import DirectController, InverseController, GoalController


def EffectorGoal(node, position):
    goal = node.addChild('goal')
    goal.addObject('EulerImplicitSolver', firstOrder=True)
    goal.addObject('CGLinearSolver', iterations=100, threshold=1e-5, tolerance=1e-5)
    goal.addObject('MechanicalObject', name='goalMO', template='Rigid3', position=position+[0., 0., 0., 1.], showObject=True, showObjectScale=10)

    spheres = goal.addChild('spheres')
    spheres.addObject('MechanicalObject', name='mo', position=[[0, 0, 0],  [10, 0, 0],   [0, 10, 0],   [0, 0, 10]])
    spheres.addObject('SphereCollisionModel', radius=5, group=1)
    spheres.addObject('RigidMapping')

    goal.addObject('UncoupledConstraintCorrection')
    return goal


# Description of how the communication is handled
# CHANGE HERE the serialport that correspond to your computer
# def SerialPortBridgeGeneric(rootNode, serialport='/dev/cu.usbserial-1420'):
# def SerialPortBridgeGeneric(rootNode, serialport='...'):
def SerialPortBridgeGeneric(rootNode, serialport='/dev/ttyUSB0'):
    return rootNode.addObject('SerialPortBridgeGeneric', port=serialport, baudRate=115200, size=3, listening=True)


def createScene(rootNode):
    # Choose here to control position or orientation of end-effector
    orientation = False

    if orientation:
        # inverse in orientation
        goalNode = EffectorGoal(rootNode, [0, 50, 50])
    else:
        # inverse in position
        goalNode = EffectorGoal(rootNode, [0, 40, 0])

    # You can add a GoalController and play with it
    # GoalController(goalNode)

    # Scene set up
    scene = Scene(rootNode, gravity=[0.0, -9810, 0.0])
    rootNode.addObject(AnimationManager(rootNode))
    rootNode.addObject('DefaultVisualManagerLoop')
    rootNode.addObject('RequiredPlugin', pluginName='SoftRobots SoftRobots.Inverse SofaMiscMapping SofaOpenglVisual SofaBoundaryCondition SofaDeformable SofaEngine SofaGeneralAnimationLoop SofaGeneralEngine SofaGeneralRigid SofaRigid')
    scene.VisualStyle.displayFlags = 'showBehavior showCollision'
    scene.addObject('MeshSTLLoader', name='loader', filename='../../data/mesh/blueprint.stl')
    scene.addObject('OglModel', src='@loader')

    # Inverse Solver
    rootNode.addObject('FreeMotionAnimationLoop')
    rootNode.addObject('QPInverseProblemSolver', name='QP', printLog=False)

    # Serial port bridge
    serial = SerialPortBridgeGeneric(rootNode)

    # add the tripod object.
    rootNode.addChild('Modelling')
    tripod = Tripod(rootNode.Modelling, effectorPos=[0, 30, 0], use_orientation=orientation, goalNode=goalNode)

    actuators = tripod.RigidifiedStructure.RigidParts.actuators
    invCtr = rootNode.addObject(InverseController(rootNode, goalNode, actuators, actuators, tripod.RigidifiedStructure.RigidParts, tripod, serial, [
                               tripod.ActuatedArm0, tripod.ActuatedArm1, tripod.ActuatedArm2]))

    # The regular controller that is being used for the last 2 steps
    rootNode.addObject(DirectController(rootNode, [tripod.ActuatedArm0,
                                        tripod.ActuatedArm1,
                                        tripod.ActuatedArm2], invCtr))

    simulation = scene.addChild('Simulation')
    simulation.addObject('EulerImplicitSolver', rayleighStiffness=0.01)
    simulation.addObject('SparseLDLSolver', name='sparseSolver', template='CompressedRowSparseMatrixd')
    simulation.addObject('GenericConstraintCorrection', solverName='sparseSolver')
    simulation.addChild(tripod)

    for i in range(3):
        visual = tripod.RigidifiedStructure.RigidParts.addChild('VisualModelArm'+str(i))
        visual.addObject('MeshSTLLoader', name='loader',filename='../../data/mesh/SG90_servoarm.stl')
        visual.addObject('MeshTopology', src='@loader')
        visual.addObject('OglModel', color=[0.75, 0.75, 0.75, 0.7], writeZTransparent=True)
        visual.addObject('RigidMapping', index=i)
