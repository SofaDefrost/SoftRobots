import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


#Units: cm and kg

def createScene(rootNode):
    rootNode.createObject('VisualStyle', displayFlags='showBehaviorModels showForceFields');

    rootNode.findData('dt').value= 0.001;
    rootNode.findData('gravity').value= '0. 0. -9810';

    rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765');
    rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight");

    ###############################
    ## MECHANICAL MODEL
    ###############################

    robot = rootNode.createChild('robot')
    robot.createObject('EulerImplicit');
    robot.createObject('SparseLDLSolver');
    robot.createObject('MeshVTKLoader', name='loader', filename=path+'branch.vtu');
    robot.createObject('TetrahedronSetTopologyContainer', position='@loader.position', tetrahedra='@loader.tetrahedra' , name='container', createTriangleArray='1', checkConnexity='1');
    robot.createObject('TetrahedronSetTopologyModifier');
    robot.createObject('TetrahedronSetTopologyAlgorithms');
    robot.createObject('TetrahedronSetGeometryAlgorithms');

    robot.createObject('MechanicalObject', name='tetras');
    ### UniformMass: Here you can set the mass of the structure
    robot.createObject('UniformMass', totalMass='0.4');
    ### TetrahedronFEMForceField:
    ### By using this component you choose hyperelastic model
    ### Here you can set the youngModulus to adapt the stiffness of the deformable structurepoissonRatio = 0.2
    youngModulus = 600
    poissonRatio = 0.4

    ###StVenantKirchhoff
    mu_ = youngModulus/(2*(1+poissonRatio))
    lambda_ = youngModulus*poissonRatio/((1-2*poissonRatio)*(1+poissonRatio))
    robot.createObject('TetrahedronHyperelasticityFEMForceField', materialName="StVenantKirchhoff", ParameterSet=str(mu_) + " " + str(lambda_))

    ### NeoHookean
    #mu_ = youngModulus/(2*(1+poissonRatio))
    #k0_ = youngModulus/(3*(1-2*poissonRatio))
    #robot.createObject('TetrahedronHyperelasticityFEMForceField', materialName="NeoHookean", ParameterSet=str(mu_) + " " + str(k0_))

    ### MooneyRivlin
    #c_1 = 30
    #c_2 = 2*mu_ - c_1
    #robot.createObject('TetrahedronHyperelasticityFEMForceField', materialName="MooneyRivlin", ParameterSet=str(c_1) + " " + str(c_2) + " " + str(k0_))

    robot.createObject('BoxROI', name='boxROI', box="-30 80 70 30 140 130   -130 -100 70  -60  -20 130  130 -100 70  60  -20 130", drawBoxes='true');
    robot.createObject('FixedConstraint', indices="@boxROI.indices");

    return rootNode
