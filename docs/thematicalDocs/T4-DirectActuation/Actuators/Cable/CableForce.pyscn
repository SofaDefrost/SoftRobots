# -*- coding: utf-8 -*-

import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

def createScene(rootNode):
				rootNode.createObject('RequiredPlugin', name = "SoftRobots", pluginName='SoftRobots')
				rootNode.createObject('RequiredPlugin', name = "SofaPython" , pluginName='SofaPython')
				rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

				rootNode.createObject('FreeMotionAnimationLoop')

				rootNode.createObject('GenericConstraintSolver', tolerance="1e-5", maxIterations="100")

				rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765')
				rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")

				##########################################
				# FEM Model                              #
				##########################################
				finger = rootNode.createChild('finger')
				finger.createObject('EulerImplicit', name='odesolver', firstOrder='1')
				finger.createObject('SparseLDLSolver', name='preconditioner')

				# Add a componant to load a VTK tetrahedral mesh and expose the resulting topology in the scene .
				finger.createObject('MeshVTKLoader', name='loader', filename=path+'finger.vtk')
				finger.createObject('TetrahedronSetTopologyContainer', src='@loader', name='container')

				# Create a mechanical object component to stores the DoFs of the model
				finger.createObject('MechanicalObject', name='tetras', template='Vec3d')

				# Gives a mass to the model
				finger.createObject('UniformMass', totalMass='0.5')

				# Add a TetrahedronFEMForceField component which implements an elastic material model solved using the Finite Element Method on
				# tetrahedrons.
				finger.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='18000')

				# To facilitate the selection of DoFs, SOFA has a concept called ROI (Region of Interest).
				# The idea is that ROI component "select" all DoFS that are enclosed by their "region".
				# We use ROI here to select a group of finger's DoFs that will be constrained to stay
				# at a fixed position.
				finger.createObject('BoxROI', name='ROI', box='-15 0 0 5 10 15', drawBoxes='true')

				# RestShapeSpringsForceField is one way in Sofa to implement fixed point constraint.
				# Here the constraints are applied to the DoFs selected by the previously defined BoxROI
				finger.createObject('RestShapeSpringsForceField', points='@ROI.indices', stiffness='1e12')

				finger.createObject('LinearSolverConstraintCorrection')


				##########################################
				# Cable                                  #
				##########################################
				cable = finger.createChild('cable')
				cable.createObject('MechanicalObject',
						position=(
								" -17.5 12.5 2.5 " +
								" -32.5 12.5 2.5 " +
								" -47.5 12.5 2.5 " +
								" -62.5 12.5 2.5 " +
								" -77.5 12.5 2.5 " +

								" -83.5 12.5 4.5 " +
								" -85.5 12.5 6.5 " +
								" -85.5 12.5 8.5 " +
								" -83.5 12.5 10.5 " +

								" -77.5 12.5 12.5 " +
								" -62.5 12.5 12.5 " +
								" -47.5 12.5 12.5 " +
								" -32.5 12.5 12.5 " +
								" -17.5 12.5 12.5 " ))

				# Create a CableConstraint object with a name.
				# the indices are referring to the MechanicalObject's positions.
				# The last indice is where the pullPoint is connected.
				# By default, the Cable is controlled by displacement, rather than force.
				cable.createObject('CableConstraint', name="aCable",
						indices='0 1 2 3 4 5 6 7 8 9 10 11 12 13',
						pullPoint="0.0 12.5 2.5", valueType='force')

				# This create a BarycentricMapping. A BarycentricMapping is a key element as it will create a bi-directional link
				# between the cable's DoFs and the finger's ones so that movements of the cable's DoFs will be mapped
				# to the finger and vice-versa;
				cable.createObject('BarycentricMapping')

				# This create a PythonScriptController that permits to programatically implement new behavior
				# or interactions using the Python programming langage. The controller is referring to a
				# file named "controller.py".
				cable.createObject('PythonScriptController', filename="ControllerForce.py", classname="controller")

				##########################################
				# Visualization                          #
				##########################################
				# In Sofa, visualization is handled by adding a rendering model.
				# Create an empty child node to store this rendering model.
				fingerVisu = finger.createChild('visu')

				# Add to this empty node a rendering model made of triangles and loaded from an stl file.
				fingerVisu.createObject('OglModel', filename=path+"finger.stl", template='ExtVec3f', color="0.0 0.7 0.7")

				# Add a BarycentricMapping to deform the rendering model to follow the ones of the mechanical model.
				fingerVisu.createObject('BarycentricMapping')

				return rootNode
