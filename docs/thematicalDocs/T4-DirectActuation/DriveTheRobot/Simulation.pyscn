import Sofa
import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


#units: cm and kg

def createScene(rootNode):
    rootNode.createObject('RequiredPlugin', pluginName='SoftRobots');
    rootNode.createObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields ');

    rootNode.findData('dt').value= 0.03;
    rootNode.findData('gravity').value= '0. 0. -9810';

    rootNode.createObject('FreeMotionAnimationLoop');
    rootNode.createObject('GenericConstraintSolver',tolerance="1e-6", maxIterations="50000");

    rootNode.createObject('BackgroundSetting', color='0 0.168627 0.211765');
    rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight");

    rootNode.createObject('PythonScriptController', classname="controller", filename="ControlKeyboard.py");


    ###############################
    ## MECHANICAL MODEL
    ###############################

    robot = rootNode.createChild('robot')
    robot.createObject('EulerImplicit', name='odesolver', firstOrder='0');
    robot.createObject('PCGLinearSolver', name='CG', preconditioners='preconditioner', tolerance="1e-15");
    robot.createObject('SparseLDLSolver', name='preconditioner');
    robot.createObject('MeshVTKLoader', name='loader', filename=path+'branch.vtu');
    robot.createObject('TetrahedronSetTopologyContainer', position='@loader.position', tetrahedra='@loader.tetrahedra' , name='container', createTriangleArray='1', checkConnexity='1');
    robot.createObject('TetrahedronSetTopologyModifier');
    robot.createObject('TetrahedronSetTopologyAlgorithms', template='Vec3d');
    robot.createObject('TetrahedronSetGeometryAlgorithms',  template='Vec3d',drawEdges='0');

    robot.createObject('MechanicalObject', name='tetras', template='Vec3d', showIndices='false', showIndicesScale='4e-5', position='@loader.position');
    robot.createObject('UniformMass', totalMass='0.4');
    robot.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.45',  youngModulus='600'); #600kPa

    robot.createObject('BoxROI', name='boxROI1', box="-30 80 70 30 140 130   ", drawBoxes='true');
    robot.createObject('PartialFixedConstraint', name="pfc1", fixedDirections="1 1 0", indices="@boxROI1.indices");
    robot.createObject('BoxROI', name='boxROI2', box="-130 -100 70  -60  -20 130  ", drawBoxes='true');
    robot.createObject('PartialFixedConstraint', name="pfc2", fixedDirections="1 1 0", indices="@boxROI2.indices");
    robot.createObject('BoxROI', name='boxROI3', box="130 -100 70  60  -20 130  ", drawBoxes='true');
    robot.createObject('PartialFixedConstraint', name="pfc3", fixedDirections="1 1 0", indices="@boxROI3.indices");

    robot.createObject('LinearSolverConstraintCorrection', solverName='preconditioner');

    leg0 = rootNode.createChild('RestPositionLeg0')
    leg0.createObject('MechanicalObject', name='meca0', template='Vec3d', showObject='true' ,showObjectScale= 15, showIndices='false', showIndicesScale='4e-5',
    position='@../robot/boxROI1.pointsInROI');
    leg1 = rootNode.createChild('RestPositionLeg1')
    leg1.createObject('MechanicalObject', name='meca1', template='Vec3d', showObject='true' ,showObjectScale= 15, showIndices='false', showIndicesScale='4e-5',
    position='@../robot/boxROI2.pointsInROI');
    leg2 = rootNode.createChild('RestPositionLeg2')
    leg2.createObject('MechanicalObject', name='meca2', template='Vec3d', showObject='true' ,showObjectScale= 15, showIndices='false', showIndicesScale='4e-5',
    position='@../robot/boxROI3.pointsInROI');

    robot.createObject('RestShapeSpringsForceField', points="@boxROI1.indices", external_rest_shape="@RestPositionLeg0/meca0", stiffness="1e3")
    robot.createObject('RestShapeSpringsForceField', points="@boxROI2.indices", external_rest_shape="@RestPositionLeg1/meca1", stiffness="1e3")
    robot.createObject('RestShapeSpringsForceField', points="@boxROI3.indices", external_rest_shape="@RestPositionLeg2/meca2", stiffness="1e3")


    ###############################
    ## VISUAL MODEL
    ###############################

    ## Modele visuel
    visualrobot = robot.createChild('visualrobot')
    visualrobot.createObject('MeshSTLLoader', filename=path+'branch.stl', name='loaderSurf')
    visualrobot.createObject('OglModel', name='mappedBodyVisual', src='@loaderSurf' ,color="1. 1. 1. 1.")
    visualrobot.createObject('BarycentricMapping', name='BMVisual')

    return rootNode
